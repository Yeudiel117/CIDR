/**
 * La <documentacion> de este proyecto se encuentra entre comentarios
 * a lo largo de todo el codigo.
 */
package paquete;

/**
 *
 * @author Garcia Magaña Fabian Yeudiel
 * Todo el proyecto se realizo dentro de este JFrame
 */
public class frame extends javax.swing.JFrame {

    /**
     * Creates new form frame
     */
    public frame() {
        /**
        * Estas son declaraciones para colocar la ventana en
        * una posicion fija, no permitir el cambio de tamaño
        * y asignar un titulo
        */
        initComponents();
        this.setTitle("Calculador de redes CIDR");
        this.setResizable(false);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLista = new javax.swing.JTextArea();
        txtHost = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txtIP1 = new javax.swing.JTextField();
        txtIP2 = new javax.swing.JTextField();
        txtIP3 = new javax.swing.JTextField();
        txtIP4 = new javax.swing.JTextField();
        txtSub1 = new javax.swing.JTextField();
        txtSub2 = new javax.swing.JTextField();
        txtSub3 = new javax.swing.JTextField();
        txtSub4 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtPosibles = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Direccion IP");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Mascara de Subred");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Cantida de dispositivos");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Subredes");

        txtLista.setColumns(20);
        txtLista.setRows(5);
        jScrollPane1.setViewportView(txtLista);

        txtHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHostActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 24)); // NOI18N
        jButton1.setText("Calcular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtIP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIP1ActionPerformed(evt);
            }
        });

        txtIP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIP2ActionPerformed(evt);
            }
        });

        txtIP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIP3ActionPerformed(evt);
            }
        });

        txtIP4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIP4ActionPerformed(evt);
            }
        });

        txtSub1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSub1ActionPerformed(evt);
            }
        });

        txtSub2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSub2ActionPerformed(evt);
            }
        });

        txtSub3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSub3ActionPerformed(evt);
            }
        });

        txtSub4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSub4ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 24)); // NOI18N
        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Redes posibles");

        txtPosibles.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addGap(141, 141, 141)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel1)))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtIP1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtIP2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtIP3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtIP4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtSub1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtSub2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtSub3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtSub4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPosibles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSub1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSub2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSub3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSub4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(txtPosibles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHostActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /**
        * Todo los calculos se realizan dento de este boton <Calcular>.
        * Aqui se declaran las variables para la operacion and
        * tomando cada octeto de la red IP con la variable <ip#>
        * tomando cada octeto de la subred con la variable <sub#>
        * tomando cada octeto del resultado de la operacion and con la variable <and#>
        * tomando cada octeto de la mascara de subred de las subredes con la variable <asub#>
        * todas de su caja de texto en la interfaz con el metodo de java .getText
        */
        int ip1 = Integer.parseInt(txtIP1.getText());
        int ip2 = Integer.parseInt(txtIP2.getText());
        int ip3 = Integer.parseInt(txtIP3.getText());
        int ip4 = Integer.parseInt(txtIP4.getText());
        
        int sub1 = Integer.parseInt(txtSub1.getText());
        int sub2 = Integer.parseInt(txtSub2.getText());
        int sub3 = Integer.parseInt(txtSub3.getText());
        int sub4 = Integer.parseInt(txtSub4.getText());
        
        int and1 = (ip1 & sub1);
        int and2 = (ip2 & sub2);
        int and3 = (ip3 & sub3);
        int and4 = (ip4 & sub4);
        
        int asub1 = 255;
        int asub2 = 255;
        int asub3 = 255;
        int asub4 = 255;
        
        /**
        * Aqui se toma el numero de host seleccionados en la interfaz
        * asignados a la variable <hosts> y convertidos en entero.
        * Se crean tres variables mas para almacenar mas adelante el exponente
        * y el resultado de la operacion con exponente y una variable auxiliar
        */
        
        int hosts = Integer.parseInt(txtHost.getText());
        int exponente = 0;
        double x = 0;
        int exponenciado = 0;
        
        /**
        * Este ciclo <for> realiza la operacion con el exponente para encontra
        * el numero de bits que se necesitan para decidir cuantas subredes existen
        * y que rango se utilizara en el numero de hosts deseados
        */
        
        for(int i = 1; hosts>=x; i++){
            x = Math.pow(2, i);
            exponente = i;
        }
        
        /**
        * El resultado final de la operacion con el exponente se alamceno en la variable
        * auxiliar <x> y aqui se asigna a la variable <exponenciado> para posteriores calculos.
        * Se calcula el numero de redes posibles en la variable <posiblesRedes> y se
        * escribe dentro de la interfaz con el metodo .setText
        */
        
        exponenciado = (int)x;
        double posiblesRedes = Math.pow(2,(exponenciado-exponente));
        txtPosibles.setText(String.valueOf((int)posiblesRedes));
        
        /**
        * En este <if> se calcula la mascara de subred para las subredes
        */
        
        if(exponenciado<256){
            asub4 = asub4-exponenciado+1;
        }else{
            int j = exponenciado-256;
            asub3 = asub3-j;
        }
        
        /**
         * Este <if> calcula las mascaras de subred, validando que el primer octeto
         * sea menos a 256.
         * Dentro se encuentra un ciclo <for> el cual realiza las operaciones
         * con las variables de los octetos previamente declaradas
         * sumando el ultimo o tercer octeto, dependiendo de la red, el resultado
         * de la operacion de bits previamente calculada, acarreandolo e imprimiendolo
         * dentro de un TextArea llamado <txtLista>, iterando hasta que muestre
         * en pantalla todos los hosts solicitados por el usuario en la interfaz.
         * Tambien se valida si el cuarto o tercer octeto se lleno, para pasar al anterior
         * y continuar las iteraciones necesarias.
         */
        
        if(and4<256){
            for(int i = 0; i<hosts+1; i++){
                txtLista.append("Red "+i+"\n");
                txtLista.append(and1+"."+and2+"."+and3+"."+and4);
                and4 = and4+exponenciado;
                txtLista.append("----"+and1+"."+and2+"."+and3+"."+and4+"\n");
                txtLista.append(asub1+"."+asub2+"."+asub3+"."+asub4);
                txtLista.append("\n");
                txtLista.append("\n");
                
                if(and4==256){
                    and3++;
                    and4 = 0;
                }
                
                if(and3==256){
                    and2++;
                    and3 = 0;
                    and4 = 0;
                }
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtIP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIP1ActionPerformed

    private void txtIP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIP2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIP2ActionPerformed

    private void txtIP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIP3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIP3ActionPerformed

    private void txtIP4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIP4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIP4ActionPerformed

    private void txtSub1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSub1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSub1ActionPerformed

    private void txtSub2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSub2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSub2ActionPerformed

    private void txtSub3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSub3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSub3ActionPerformed

    private void txtSub4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSub4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSub4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        /**
         * Esta funcion se encuentra en el boton de <limpiar> y solo realiza
         * la funcion de limpiar la caja de texto <txtLista>
         */
        txtLista.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtIP1;
    private javax.swing.JTextField txtIP2;
    private javax.swing.JTextField txtIP3;
    private javax.swing.JTextField txtIP4;
    private javax.swing.JTextArea txtLista;
    private javax.swing.JLabel txtPosibles;
    private javax.swing.JTextField txtSub1;
    private javax.swing.JTextField txtSub2;
    private javax.swing.JTextField txtSub3;
    private javax.swing.JTextField txtSub4;
    // End of variables declaration//GEN-END:variables
}
